#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}ðŸš€ Frontend Build & Push${NC}"
echo "=================================="

# Load environment variables from .env.local if it exists
if [ -f .env.local ]; then
  source .env.local
fi

# Parse arguments
CDK_PROFILE=${AWS_PROFILE:-default}
CDK_REGION=${AWS_REGION:-}
while [[ "$#" -gt 0 ]]; do case $1 in
  --profile) CDK_PROFILE="$2"; shift;;
  --region) CDK_REGION="$2"; shift;;
esac; shift; done

# Check if region is set
if [ -z "$CDK_REGION" ]; then
  # Try to get region from AWS config
  CDK_REGION=$(aws configure get region --profile $CDK_PROFILE 2>/dev/null)
  
  if [ -z "$CDK_REGION" ]; then
    echo "Error: AWS region is required"
    echo "Usage: ./build-and-push [--profile <aws_profile>] [--region <aws_region>]"
    echo "Example: ./build-and-push --profile dev --region us-west-2"
    echo "You may also configure your region by running 'aws configure'"
    exit 1
  fi
fi

echo "Using AWS Profile: $CDK_PROFILE"
echo "Using AWS Region: $CDK_REGION"

# Use stack outputs from .env.local if available, otherwise fetch from AWS
if [ -n "$WEBSITE_BUCKET" ] && [ -n "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
  echo "Using stack configuration from .env.local..."
else
  echo "Stack outputs not found in .env.local, fetching from AWS..."
  
  WEBSITE_BUCKET=$(aws cloudformation describe-stacks \
    --stack-name CcIntelligenceStack \
    --profile $CDK_PROFILE \
    --region $CDK_REGION \
    --query 'Stacks[0].Outputs[?OutputKey==`WebsiteBucketName`].OutputValue' \
    --output text \
    --no-cli-pager)

  CLOUDFRONT_DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
    --stack-name CcIntelligenceStack \
    --profile $CDK_PROFILE \
    --region $CDK_REGION \
    --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
    --output text \
    --no-cli-pager)

  WEBSITE_URL=$(aws cloudformation describe-stacks \
    --stack-name CcIntelligenceStack \
    --profile $CDK_PROFILE \
    --region $CDK_REGION \
    --query 'Stacks[0].Outputs[?OutputKey==`WebsiteURL`].OutputValue' \
    --output text \
    --no-cli-pager)
fi

# Validate required values are available
if [ -z "$WEBSITE_BUCKET" ]; then
  echo "Error: Could not determine WEBSITE_BUCKET"
  exit 1
fi

if [ -z "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
  echo "Error: Could not determine CLOUDFRONT_DISTRIBUTION_ID"
  exit 1
fi

echo "Website Bucket: $WEBSITE_BUCKET"
echo "CloudFront Distribution ID: $CLOUDFRONT_DISTRIBUTION_ID"
echo "Website URL: $WEBSITE_URL"

# Note: .env.local should already contain Cognito configuration from deploy script
echo "Using existing .env.local configuration..."

# Build frontend
echo "Building frontend..."
npm ci && npm run build

# Upload frontend files to S3
echo "Uploading frontend files to S3..."
aws s3 sync dist/ s3://$WEBSITE_BUCKET/ --delete --profile $CDK_PROFILE --region $CDK_REGION

# Invalidate CloudFront cache
echo "Invalidating CloudFront cache..."
INVALIDATION_ID=$(aws cloudfront create-invalidation \
  --profile $CDK_PROFILE \
  --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
  --paths "/*" \
  --no-cli-pager \
  --query 'Invalidation.Id' \
  --output text)

echo $INVALIDATION_ID

echo ""
echo -e "${GREEN}ðŸŽ‰ Frontend deployment complete!${NC}"
echo "Website URL: $WEBSITE_URL"
echo ""
echo -e "${YELLOW}Frontend-only deployment finished.${NC}"
echo "If you need to update infrastructure, run the full './deploy' script." 