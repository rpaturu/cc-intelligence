#!/bin/bash

set -e;

# Load environment variables from .env.local if it exists
if [ -f .env.local ]; then
  source .env.local
fi

# Parse arguments
CDK_PROFILE=${AWS_PROFILE}
AWS_REGION=${AWS_REGION}
while [[ "$#" -gt 0 ]]; do case $1 in
  --profile) CDK_PROFILE="$2"; shift;;
  --region) AWS_REGION="$2"; shift;;
esac; shift; done

# Check if region is set
if [ -z "$AWS_REGION" ]; then
  # Try to get region from AWS config
  AWS_REGION=$(aws configure get region --profile $CDK_PROFILE 2>/dev/null)
  
  if [ -z "$AWS_REGION" ]; then
    echo "Error: AWS region is required"
    echo "Usage: ./deploy [--profile <aws_profile>] [--region <aws_region>]"
    echo "Example: ./deploy --profile dev --region us-west-2"
    echo "You may also configure your region by running 'aws configure'"
    exit 1
  fi
fi

echo "Using AWS Profile: $CDK_PROFILE"
echo "Using AWS Region: $AWS_REGION"

# Build and deploy infrastructure
echo "Building and deploying infrastructure..."
cd infrastructure
npm ci && npm run build

# Deploy the CDK stack
echo "Deploying CDK stack..."
npx cdk --profile $CDK_PROFILE --region $AWS_REGION deploy CcIntelligenceStack --require-approval never

# Go back to project root
cd ..

# Get stack outputs
echo "Getting stack outputs..."
WEBSITE_BUCKET=$(aws cloudformation describe-stacks \
  --stack-name CcIntelligenceStack \
  --profile $CDK_PROFILE \
  --region $AWS_REGION \
  --no-cli-pager \
  --stack-name CcIntelligenceStack \
  --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucketName'].OutputValue" \
  --output text)

CLOUDFRONT_DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
  --stack-name CcIntelligenceStack \
  --profile $CDK_PROFILE \
  --region $AWS_REGION \
  --no-cli-pager \
  --stack-name CcIntelligenceStack \
  --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" \
  --output text)

WEBSITE_URL=$(aws cloudformation describe-stacks \
  --stack-name CcIntelligenceStack \
  --profile $CDK_PROFILE \
  --region $AWS_REGION \
  --no-cli-pager \
  --stack-name CcIntelligenceStack \
  --query "Stacks[0].Outputs[?OutputKey=='WebsiteURL'].OutputValue" \
  --output text)

USER_POOL_ID=$(aws cloudformation describe-stacks \
  --stack-name CcIntelligenceStack \
  --profile $CDK_PROFILE \
  --region $AWS_REGION \
  --no-cli-pager \
  --stack-name CcIntelligenceStack \
  --query "Stacks[0].Outputs[?OutputKey=='UserPoolId'].OutputValue" \
  --output text)

USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks \
  --stack-name CcIntelligenceStack \
  --profile $CDK_PROFILE \
  --region $AWS_REGION \
  --no-cli-pager \
  --stack-name CcIntelligenceStack \
  --query "Stacks[0].Outputs[?OutputKey=='UserPoolClientId'].OutputValue" \
  --output text)

echo "Website Bucket: $WEBSITE_BUCKET"
echo "CloudFront Distribution ID: $CLOUDFRONT_DISTRIBUTION_ID"
echo "Website URL: $WEBSITE_URL"
echo "User Pool ID: $USER_POOL_ID"
echo "User Pool Client ID: $USER_POOL_CLIENT_ID"

# Update .env.local with stack outputs
echo "Updating .env.local with stack configuration..."
if [ -f .env.local ]; then
  # Update existing values (using | as delimiter to handle URLs with /)
  sed -i.bak "s|VITE_USER_POOL_ID=.*|VITE_USER_POOL_ID=$USER_POOL_ID|" .env.local
  sed -i.bak "s|VITE_USER_POOL_CLIENT_ID=.*|VITE_USER_POOL_CLIENT_ID=$USER_POOL_CLIENT_ID|" .env.local
  sed -i.bak "s|WEBSITE_BUCKET=.*|WEBSITE_BUCKET=$WEBSITE_BUCKET|" .env.local
  sed -i.bak "s|CLOUDFRONT_DISTRIBUTION_ID=.*|CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID|" .env.local
  sed -i.bak "s|WEBSITE_URL=.*|WEBSITE_URL=$WEBSITE_URL|" .env.local
  
  # Add values if they don't exist
  if ! grep -q "WEBSITE_BUCKET=" .env.local; then
    echo "WEBSITE_BUCKET=$WEBSITE_BUCKET" >> .env.local
  fi
  if ! grep -q "CLOUDFRONT_DISTRIBUTION_ID=" .env.local; then
    echo "CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID" >> .env.local
  fi
  if ! grep -q "WEBSITE_URL=" .env.local; then
    echo "WEBSITE_URL=$WEBSITE_URL" >> .env.local
  fi
  
  rm .env.local.bak 2>/dev/null || true
  echo "Updated .env.local with stack configuration"
else
  echo "Warning: .env.local file not found"
fi

# Build frontend
echo "Building frontend..."
npm ci && npm run build

# Build and deploy frontend using dedicated script
echo "Building and deploying frontend..."
./build-and-push

echo ""
echo "ðŸŽ‰ Full deployment complete!"
echo "Both infrastructure and frontend have been deployed." 