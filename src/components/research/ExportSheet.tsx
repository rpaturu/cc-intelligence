import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle } from "../ui/sheet";
import { Button } from "../ui/button";
import { Card, CardContent } from "../ui/card";
import { Badge } from "../ui/badge";
import { Download, Building, CheckCircle, MapPin, TrendingUp, Zap, Users, Mail, Phone, Linkedin, Swords, FileText, Presentation, FileSpreadsheet, Code2 } from "lucide-react";

interface ExportSheetProps {
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  currentCompany: string;
  user: any;
  messages: any[];
  completedResearch?: any[];
  onDownloadReport: (format: 'pdf' | 'powerpoint' | 'word' | 'excel' | 'json') => void;
}

export default function ExportSheet({
  isOpen,
  onOpenChange,
  currentCompany,
  user,
  messages,
  completedResearch = [],
  onDownloadReport
}: ExportSheetProps) {
  return (
    <Sheet open={isOpen} onOpenChange={onOpenChange}>
      <SheetContent side="right" className="w-[96vw] xs:w-[92vw] sm:w-[85vw] md:w-[80vw] lg:w-[900px] max-w-[96vw] sm:max-w-[900px] flex flex-col h-screen overflow-hidden">
        <SheetHeader className="flex-shrink-0 px-6 pt-6">
          <SheetTitle className="flex items-center gap-2">
            <Download className="w-5 h-5" />
            View Full Report
          </SheetTitle>
          <SheetDescription>
            Complete research summary for {currentCompany} - Generated by {user.firstName} {user.lastName} on {new Date().toLocaleDateString()}
          </SheetDescription>
        </SheetHeader>
        
        {/* Download Options */}
        <div className="flex-shrink-0 px-6 py-4 border-b bg-muted/30">
          <div className="space-y-3">
            <h4 className="text-sm font-medium text-muted-foreground">Download Options</h4>
            <div className="flex flex-wrap gap-2">
              <Button
                onClick={() => onDownloadReport('pdf')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
              >
                <FileText className="w-4 h-4 text-red-600" />
                Download as PDF
              </Button>
              <Button
                onClick={() => onDownloadReport('powerpoint')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
              >
                <Presentation className="w-4 h-4 text-orange-600" />
                Download as PowerPoint
              </Button>
              <Button
                onClick={() => onDownloadReport('word')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
              >
                <FileText className="w-4 h-4 text-blue-600" />
                Download as Word
              </Button>
              <Button
                onClick={() => onDownloadReport('excel')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
              >
                <FileSpreadsheet className="w-4 h-4 text-green-600" />
                Download as Excel
              </Button>
              <Button
                onClick={() => onDownloadReport('json')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
              >
                <Code2 className="w-4 h-4 text-gray-600" />
                Download as JSON
              </Button>
            </div>
          </div>
        </div>
        
        <div className="flex-1 overflow-y-auto px-6 mt-4 space-y-6 export-sheet-scroll"
             style={{ 
               maxHeight: 'calc(100vh - 160px)',
               minHeight: '300px'
             }}>
          {messages.find(msg => msg.companySummary) && (
            <div>
              <h3 className="mb-3 flex items-center gap-2">
                <Building className="w-4 h-4" />
                Company Overview
              </h3>
              <Card>
                <CardContent className="p-4">
                  {(() => {
                    const companySummary = messages.find(msg => msg.companySummary)?.companySummary;
                    if (!companySummary) return null;
                    
                    return (
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <span className="text-foreground">{companySummary.name}</span>
                          <Badge variant="secondary">{companySummary.industry}</Badge>
                          <span className="text-muted-foreground">|</span>
                          <span className="text-muted-foreground">{companySummary.size}</span>
                        </div>
                        <div className="flex items-center gap-2 text-muted-foreground">
                          <MapPin className="w-4 h-4" />
                          <span>{companySummary.location}</span>
                        </div>
                        <div className="flex items-center gap-2 text-muted-foreground">
                          <TrendingUp className="w-4 h-4" />
                          <span>Recent: {companySummary.recentNews}</span>
                        </div>
                        <div className="flex items-start gap-2">
                          <Zap className="w-4 h-4 text-muted-foreground mt-0.5" />
                          <div className="flex flex-wrap gap-1">
                            <span className="text-muted-foreground">Tech:</span>
                            {companySummary.techStack.map((tech: string, index: number) => (
                              <Badge key={index} variant="outline" className="text-xs">
                                {tech}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </div>
                    );
                  })()}
                </CardContent>
              </Card>
            </div>
          )}

          {completedResearch && completedResearch.length > 0 && (
            <div>
              <h3 className="mb-3 flex items-center gap-2">
                <CheckCircle className="w-4 h-4" />
                Research Findings ({completedResearch?.length || 0} areas completed)
              </h3>
              <div className="space-y-4">
                {completedResearch?.map((research) => (
                  <Card key={research.id}>
                    <CardContent className="p-4">
                      <div className="space-y-3">
                        <div>
                          <h4 className="text-base">{research.title}</h4>
                          <p className="text-xs text-muted-foreground">
                            Completed: {research.completedAt.toLocaleString()}
                          </p>
                        </div>
                        {research.findings?.items?.map((item: any, itemIndex: number) => (
                          <div key={itemIndex} className="border-l-2 border-primary/20 pl-3">
                            <h5 className="text-sm text-foreground mb-1">{item.title}</h5>
                            <p className="text-xs text-muted-foreground mb-2">{item.description}</p>
                            
                            {item.contact && (
                              <div className="bg-accent/30 rounded p-2 mb-2">
                                <div className="flex items-center gap-2 mb-1">
                                  <Users className="w-3 h-3" />
                                  <span className="text-xs">{item.contact.name} - {item.contact.role}</span>
                                </div>
                                <div className="text-xs text-muted-foreground space-y-1">
                                  {item.contact.email && (
                                    <div className="flex items-center gap-1">
                                      <Mail className="w-3 h-3" />
                                      <span>{item.contact.email}</span>
                                    </div>
                                  )}
                                  {item.contact.phone && (
                                    <div className="flex items-center gap-1">
                                      <Phone className="w-3 h-3" />
                                      <span>{item.contact.phone}</span>
                                    </div>
                                  )}
                                  {item.contact.linkedin && (
                                    <div className="flex items-center gap-1">
                                      <Linkedin className="w-3 h-3" />
                                      <span>{item.contact.linkedin}</span>
                                    </div>
                                  )}
                                </div>
                              </div>
                            )}

                            {item.valueProps && (
                              <div className="space-y-2 mb-2">
                                {item.valueProps?.map((valueProp: any, vpIndex: number) => (
                                  <div key={vpIndex} className="bg-primary/5 rounded p-2 border-l-2 border-l-primary">
                                    <div className="flex items-center gap-2 mb-1">
                                      <Swords className="w-3 h-3 text-primary" />
                                      <span className="text-xs">{valueProp.ourAdvantage}</span>
                                      <Badge variant="outline" className="text-xs">vs {valueProp.competitor}</Badge>
                                    </div>
                                    <div className="text-xs space-y-1">
                                      {valueProp.talkingPoints?.map((point: string, pointIndex: number) => (
                                        <div key={pointIndex} className="flex items-start gap-1">
                                          <span className="text-primary mt-0.5">•</span>
                                          <span>{point}</span>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                ))}
                              </div>
                            )}
                            
                            {item.details && (
                              <div className="text-xs text-muted-foreground space-y-1">
                                {item.details?.map((detail: string, detailIndex: number) => (
                                  <div key={detailIndex} className="flex items-start gap-1">
                                    <span className="text-primary mt-0.5">•</span>
                                    <span>{detail}</span>
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}

          {(!completedResearch || completedResearch.length === 0) && (
            <div className="text-center py-8">
              <p className="text-muted-foreground">No research findings yet. Complete some research areas to see them here.</p>
            </div>
          )}
        </div>
      </SheetContent>
    </Sheet>
  );
}